implementation the virtual memory API, as defined by the functions in VirtualMemory.h




Virtual memory is a memory-management model that allows processes to use more memory than is actually
available on the host. This is achieved by mapping virtual (a.k.a. logical) addresses (what the process sees)
into physical addresses (actual locations in the RAM).
Since the physical address space is significantly smaller than the virtual address space, not all memory
space of all processes can fit in the RAM at the same time. 
Therefore, parts of the virtual memory must be stored in the hard drive until the next time they are used by their process.
Paging is an approach where the virtual address space is partitioned into fixed-sized contiguous blocks,
called pages. The physical address space is similarly partitioned into blocks the same size as pages, called
frames. At any given time, each page is either mapped to a frame in the physical memory or is stored in the
hard drive. When a process tries to access a virtual memory address in a page that is not in the physical
memory, that page must be brought into the physical memory (swapped in). If there are no unused frames,
another page must be evicted from the physical memory (swapped out). The mapping between pages and
frames is done using page tables. The naive implementation will have a big table where the number in the
p’th row is the index of the frame to which the p’th page is mapped